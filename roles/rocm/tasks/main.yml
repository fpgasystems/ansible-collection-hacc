---

# TODO:
#   - Add Cleanup
#   - Add logic for PATH with module or manually
#   - Improve devices object data model
#   - Add logic to check if rocm and gpu kernel are compatible:
#     https://rocmdocs.amd.com/projects/install-on-linux/en/latest/reference/user-kernel-space-compat-matrix.html
#     Allow only one gpu kernel version to be installed.

# PRE-INSTALLATION
# https://rocmdocs.amd.com/projects/install-on-linux/en/latest/install/prerequisites.html
# Prerequisites
# sudo apt install python3-setuptools python3-wheel
- name: Install prerequisite python modules
  ansible.builtin.apt:
    name:
      - "python3-setuptools"
      - "python3-wheel"
#
# Install the `module` command for easy switching of versions
# sudo apt install environment-modules
- name: Install module command for multi version management
  ansible.builtin.apt:
    name:
      - "environment-modules"
  when: rocm_allow_multiple_versions
#
# Setup udev rules
# touch /etc/udev/rules.d/70-amdgpu.rules
# KERNEL=="kfd", GROUP="devteam", MODE="0660"
# SUBSYSTEM=="drm", KERNEL=="renderD*", GROUP="systems-all", MODE="0660"
# Setup these udev rules instead of adding users to 'render' and 'video' group
- name: Setup udev rules to allow users of a group to access to the GPU
  ansible.builtin.copy:
    content: |-
      KERNEL=="kfd", GROUP="devteam", MODE="0660"
      SUBSYSTEM=="drm", KERNEL=="renderD*", GROUP="systems-all", MODE="0660"
    dest: /etc/udev/rules.d/70-amdgpu.rules
    owner: root
    group: root
    mode: '0750'
  notify: Reload udev rules

# Reload udev
# sudo udevadm control --reload-rules && sudo udevadm trigger


# INSTALLATION
# https://rocmdocs.amd.com/projects/install-on-linux/en/latest/install/install-methods/package-manager/package-manager-ubuntu.html
# https://instinct.docs.amd.com/projects/amdgpu-docs/en/latest/install/detailed-install/package-manager/package-manager-ubuntu.html

# Download gpg key:
# # Make the directory if it doesn't exist yet.
# # This location is recommended by the distribution maintainers.
# sudo mkdir --parents --mode=0755 /etc/apt/keyrings
# # Download the key, convert the signing-key to a full
# # keyring required by apt and store in the keyring directory
# wget https://repo.radeon.com/rocm/rocm.gpg.key -O - | \
#     gpg --dearmor | sudo tee /etc/apt/keyrings/rocm.gpg > /dev/null
# Register packages
# sudo tee /etc/apt/sources.list.d/rocm.list << EOF
# deb [arch=amd64 signed-by=/etc/apt/keyrings/rocm.gpg] https://repo.radeon.com/rocm/apt/7.1
# jammy main
# deb [arch=amd64 signed-by=/etc/apt/keyrings/rocm.gpg] https://repo.radeon.com/graphics/7.1/ubuntu
# jammy main
# EOF
# Register Kernel packages:
# sudo tee /etc/apt/sources.list.d/amdgpu.list << EOF
# deb [arch=amd64 signed-by=/etc/apt/keyrings/rocm.gpg] https://repo.radeon.com/amdgpu/30.10.2/
# ubuntu jammy main
# EOF
#
# NOTE: if the version ends in `.0`, then this needs to be removed for the repository.
# For example: for version 7.1.0, the repository name is 7.1,
# but for 7.1.3, the repo is still 7.1.3
- name: Add ROCm repos to apt using gpg key
  ansible.builtin.deb822_repository:
    name: rocm
    types: [deb]
    suites: '{{ ansible_distribution_release }}'
    components: main
    architectures: amd64
    uris: "https://repo.radeon.com/rocm/apt/{{ version | regex_replace('\\.0$', '') }}"
    signed_by: https://repo.radeon.com/rocm/rocm.gpg.key
    state: present
    enabled: true
  loop: "{{ rocm_versions }}"
  loop_control:
    loop_var: version
  notify: Update apt packages

- name: Add AMD gpu kernel repos to apt using gpg key
  ansible.builtin.deb822_repository:
    name: amdgpu
    types: [deb]
    suites: '{{ ansible_distribution_release }}'
    components: main
    architectures: amd64
    uris: "https://repo.radeon.com/amdgpu/{{ version | regex_replace('\\.0$', '') }}/ubuntu"
    signed_by: https://repo.radeon.com/rocm/rocm.gpg.key
    state: present
    enabled: true
  loop: "{{ rocm_versions }}"
  loop_control:
    loop_var: version
  notify: Update apt packages

# Set the APT priority higher than the default Ubuntu packages
# <100: never install automatically, 100: default for installed packages,
# 500: default for unpinned repos, 1000+ force install even if it means downgrade
# You can check if the priority is set correctly using 'apt-cache policy'
- name: Make ROCm repos preffered
  ansible.builtin.copy:
    content: |-
      Package: *
      Pin: release o=repo.radeon.com
      Pin-Priority: 600
    dest: /etc/apt/preferences.d/rocm-pin-600
    owner: root
    group: root
    mode: '0750'
  notify: Update apt packages

# sudo apt update
- name: Update apt packages if ROCm sources changed
  ansible.builtin.meta: flush_handlers

# Install kernel driver
- name: Install amdgpu kernel driver
  ansible.builtin.apt:
    name: amdgpu-dkms
    state: present
  notify: Reboot system

# Reboot
- name: Reboot the system if a new amd gpu kernel is installed
  ansible.builtin.meta: flush_handlers


# Install Rocm
# sudo apt install rocm
# rocm-hip-libraries rocm-hip-runtime rocm-language-runtime
# rocm-ml-libraries rocm-opencl-runtime rocm-developer-tools
# rocm-hip-runtime-devel rocm-hip-sdk rocm-ml-sdk rocm-opencl-sdk rocm-openmp-sdk
- name: Install full ROCm suite for all selected versions
  ansible.builtin.apt:
    name: "rocm{{ version }}"
    state: present
  loop: "{{ rocm_versions }}"
  loop_control:
    loop_var: version

# TODO: add logic to allow selection of packages
# - name: Install only ROCm build toolchain for the selected versions
#   ansible.builtin.apt:
#     name:
#       - "rocm-developer-tools{{ version }}"
#       - "rocm-hip-runtime-devel{ version }}"
#       - "rocm-hip-sdk{{ version }}"
#       - "rocm-ml-sdk{{ version }}"
#       - "rocm-opencl-sdk{{ version }}"
#       - "rocm-openmp-sdk{{ version }}"
#     state: present
#   loop: "{{ rocm_versions }}"
#   loop_control:
#     loop_var: version
#
# - name: Install only ROCm runtime for the selected versions
#   ansible.builtin.apt:
#     name:
#       - "rocm-developer-tools{{ version }}"
#       - "rocm-hip-libraries{ version }}"
#       - "rocm-hip-runtime{{ version }}"
#       - "rocm-ml-libraries{{ version }}"
#       - "rocm-opencl-runtime{{ version }}"
#       - "rocm-language-runtime{{ version }}"
#     state: present
#   loop: "{{ rocm_versions }}"
#   loop_control:
#     loop_var: version

# POST INSTALLATION
# https://rocmdocs.amd.com/projects/install-on-linux/en/latest/install/post-install.html
#
# Configure ROCM shared objects
# sudo tee --append /etc/ld.so.conf.d/rocm.conf <<EOF
# /opt/rocm/lib
# /opt/rocm/lib64
# EOF
# sudo ldconfig
- name: Configure the system linker to find the ROCm shared objects path
  ansible.builtin.copy:
    content: |-
      /opt/rocm/lib
      /opt/rocm/lib64
    dest: /etc/ld.so.conf.d/rocm.conf
    owner: root
    group: root
    mode: '0750'
  notify: Reload system linker

# TODO: give the option to manage the PATH manually or using module
# Configure ROCM PATH
# < use `module` command >
# copy /opt/rocm-{{ version }}/lib/rocmmod to /usr/share/modules/modulefiles
#
